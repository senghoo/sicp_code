(define (queens board-size)
  (define (queen-cols k)
    (if (= k 0)
        (list empty-board)
        (filter
         (lambda (positions) (safe? k positions))
         (flatmap
          (lambda (rest-of-queens)
            (map (lambda (new-row)
                   (adjoin-position new-row k rest-of-queens))
                 (enumerate-interval 1 board-size)))
          (queen-cols (- k 1))))))
  (queen-cols board-size))

(define empty-board (list))

(define (adjoin-position row col positions)
  (cons (cons row col) positions))

(define (safe? k positions)
  (define (conflict? x y)
    (or (= (car x) (car y))
        (= (cdr x) (cdr y))
        (= (+ (car x) (cdr x))
           (+ (car y) (cdr y)))
        (= (- (car x) (cdr x))
           (- (car y) (cdr y)))))
  (let ((new (car positions))
        (rest (cdr positions)))
    (= 0 (length (filter (lambda (x) (conflict? new x)) rest)))))
